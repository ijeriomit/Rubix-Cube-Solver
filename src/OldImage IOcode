import errno
import os
import cv2
import Cube_1
import inspect


class ImageIO:

    valid_types = [".jpg", ".png", ".tga"]
    max_num_faces = 6

    def __init__(self):
        self.images = [None for i in range(0, self.max_num_faces)]

    def loadImages(self, face, filetype):
        self.checkValidImageFormat(filetype)
        path = os.path.dirname(inspect.getfile(Cube_1)) + "/Face_" + face + filetype
        self.checkValidPath(path)
        img = cv2.imread(path, 1)
        return img

    def saveImages(self, filetype):
        for i in range(0, self.max_num_faces):
            self.images[i] = self.loadImages(str(i+1), filetype)

    def checkValidPath(self, path):
        if not os.path.isfile(path):
            raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), path)

    def checkValidImageFormat(self, filetype):
        if filetype not in self.valid_types:
            raise FileNotFoundError

@TESTS
    def test_saveImages(self):
        self.imageIO.saveImages(".jpg")
        for i in range(0, 6):
            self.assertNotEqual(None, self.imageIO.images[i].all())

    def test_imagesSizeStaysAtMaxSize(self):
        self.imageIO.saveImages(".jpg")
        self.imageIO.saveImages(".jpg")
        self.assertEqual(6, len(self.imageIO.images))




